<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pair Programming | daniely.github.io]]></title>
  <link href="http://daniely.github.io/blog/categories/pair-programming/atom.xml" rel="self"/>
  <link href="http://daniely.github.io/"/>
  <updated>2013-08-09T23:01:34+08:00</updated>
  <id>http://daniely.github.io/</id>
  <author>
    <name><![CDATA[Daniel Yoon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pairing With Avdi]]></title>
    <link href="http://daniely.github.io/blog/2012/06/12/pairing-with-avdi/"/>
    <updated>2012-06-12T17:54:00+08:00</updated>
    <id>http://daniely.github.io/blog/2012/06/12/pairing-with-avdi</id>
    <content type="html"><![CDATA[<h2>Intro</h2>

<p>Back in 2012 <a href="http://devblog.avdi.org/">Avdi Grimm</a> was offering to pair program
for free &ndash; all you had to do was ask. Avdi <a href="http://devblog.avdi.org/2013/02/19/taking-a-break-from-pair-programming/">no longer</a>
offers this amazing service but I wanted to at least share about one of our pairing
sessions as I feel very lucky to have had the opportunity.</p>

<h2>Spree Installer Bug</h2>

<p>The first problem we tackled was a small bug in <a href="https://github.com/spree/spree">Spree Commerce</a>.
During installation it would sometimes incorrectly detect a successful imagemagick
installation.  I had already submitted
a <a href="https://github.com/spree/spree/pull/1533">pull request</a> but I didn&rsquo;t know
how to go about writing a test for it.</p>

<p>In the end we decided not to write a real test but we did do a quick spike.
Without going into too much detail, the original
pull request runs a shell command then checks the exit code. If it runs without
errors we can assume imagemagick is correctly installed.</p>

<p>``` ruby</p>

<h1>shell command to check if imagemagick is installed correctly</h1>

<p>%x(identify -version)</p>

<h1>check exit code</h1>

<p>$? => #&lt;Process::Status: pid 16493 exit 0></p>

<h1>better way to check</h1>

<p>$?.success? => true
```</p>

<p>First thing Avdi says is, &ldquo;lets see if we can override the %x command&rdquo;. I just
stared at him blankly on our screenshare. Wut? How? Do we write a method like
<code>def %x(command)</code> or something? I tried, it doesn&rsquo;t work. So what to do?</p>

<p>Another common way to run shell commands from ruby is to use backticks.</p>

<p><code>ruby
`pwd` =&gt; "/Users/daniel/code\n"
</code></p>

<p>Somehow Avdi knew that the <code>%x</code> syntax uses backticks. It&rsquo;s <a href="http://ruby-doc.org/core-2.0/Kernel.html#method-i-60">documented</a>
but I was still surprised he knew this. He had a hunch that we could override
backticks and in turn override <code>%x</code> and that&rsquo;s exactly what we did.</p>

<p><code>`` ruby
class Foo
  def</code>(s)</p>

<pre><code>puts 'hello'
</code></pre>

<p>  end
end
```</p>

<p>But after we wrote this bit I was stuck again. How the heck do you call that
method? <code>Foo.new`('some command')</code> ??? That wont work. The answer is to use
<code>instance_eval</code>.</p>

<p><code>`` ruby
o = Foo.new
o.instance_eval {</code>ls` }</p>

<h1>=> &lsquo;hello&rsquo;</h1>

<h1>with the %x syntax</h1>

<p>o.instance_eval { %x[ls] }</p>

<h1>exit code ok?</h1>

<p>$?  # => 0
```</p>

<p>The other issue was figuring out whether or not we could override the <code>$?</code>
value. But turns out it&rsquo;s read only.</p>

<p>This was the point when Avdi realized that there&rsquo;s no reason
to use backticks or the <code>%x[]</code> way of making system calls because these
versions are mainly used for their return values. All we want to know is if the
command executed successfully and relying on
<code>$?</code> for that info is in a way reaching outside of our methods boundaries.</p>

<p>A simpler/better approach is to call the command and see if
it was successful or not. That&rsquo;s it. And we can do just that with <code>system</code>. Thus our
code refactored to this:</p>

<p><code>ruby
success = system('identify -version')
</code></p>

<p>We replaced 7 lines of code with just that one call in a new
<a href="https://github.com/spree/spree/pull/1660/files">pull request</a></p>

<h2>Double Error Messages</h2>

<p>Then we talked about the double error messages that show up when you have a form &lsquo;hint&rsquo;
that&rsquo;s the same as the error message. I was asking Avdi to help me figure out
how to &ldquo;correctly&rdquo; change the way rails handles this. But it turns out the
&ldquo;correct&rdquo; solution is to not touch rails at all. Instead, change the markup.
This was solved by adding a css style to hide the hint when an error
group is present. That&rsquo;s it! simple!</p>

<h2>Finding Solutions</h2>

<p>This was a valuable lesson I learned from Avdi. While he has the technical chops
to program his way around things that&rsquo;s not what he turns to first.
Instead, he looks to see if the solution being implemented is the right fit.
Often times it&rsquo;s not and there might be a simpler solution to the problem. We just
saw two examples of that.</p>

<h2>Getting Better</h2>

<p>For the last part of our session I asked for advice on improving as a developer.
These are the tips he gave in no particular order:</p>

<ul>
<li>Pair program</li>
<li>Read code. rack is a good codebase to look at</li>
<li>Read books. Blogs are ok but books tend to have less errors

<ul>
<li>Eloquent Ruby, Ruby Best Practices, The Ruby Way, Ruby Quiz,
ruby talk mailing list, anything written by James Gray,
Peepcode Play by Play</li>
</ul>
</li>
</ul>


<h2>Thanks Avdi for the awesome pairing session!</h2>
]]></content>
  </entry>
  
</feed>
